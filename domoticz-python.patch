--- domoticz-2025.1/hardware/plugins/DelayedLink.h.orig	2025-05-05 09:02:49.000000000 +0200
+++ domoticz-2025.1/hardware/plugins/DelayedLink.h	2025-05-07 00:27:10.339387997 +0200
@@ -161,10 +161,8 @@
             shared_lib_ = nullptr;
 
             // Define the base Python versions in descending order (latest to oldest)
-			constexpr std::array<const char*, 11> python_versions = {
-				"python3.14", "python3.13", "python3.12", "python3.11", "python3.10",
-                "python3.9", "python3.8", "python3.7", "python3.6",
-                "python3.5", "python3.4"
+			constexpr std::array<const char*, 1> python_versions = {
+				PYTHON_LIBDIR
             };
             // Platform-specific suffixes
 			std::string extension;
@@ -182,7 +180,7 @@
 				shared_lib_ = LoadLibrary(lib_name.c_str());
 #else
 				lib_name += extension;
-				FindLibrary(lib_name.c_str(), true);
+				FindLibrary(lib_name.c_str(), false);
 #endif
 				if (shared_lib_)
 				{
@@ -370,34 +368,20 @@
 				else
 				{
 					std::vector<std::string> entries;
-					DirectoryListing(entries, sLibrary, true, false);
-					for (const auto &entry : entries)
-					{
-						if (shared_lib_)
-						{
-							break;
-						}
-
-						library = sLibrary + entry + "/";
-						FindLibrary(library, false);
-					}
-
-					entries.clear();
 					DirectoryListing(entries, sLibrary, false, true);
 					for (const auto &filename : entries)
 					{
-						if (shared_lib_)
-						{
-							break;
-						}
 
 						if (filename.length() > 12 &&
 							filename.compare(0, 11, "libpython3.") == 0 &&
-							filename.compare(filename.length() - 3, 3, ".so") == 0 &&
-							filename.compare(filename.length() - 6, 6, ".dylib") == 0)
+							filename.find(".so", 10) != std::string::npos)
 						{
-							library = sLibrary + filename;
+							library = sLibrary + "/" + filename;
 							shared_lib_ = dlopen(library.c_str(), RTLD_LAZY | RTLD_GLOBAL);
+							if (shared_lib_)
+							{
+								break;
+							}
 						}
 					}
 				}
